# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'quiz.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon,QPixmap, QFont
import resourcesCascade
import sqlite3
import base64
import vertexai
from vertexai.generative_models import GenerativeModel, Part
import vertexai.preview.generative_models as generative_models
import re
import json
import functools

class Ui_quiz(object):
    def __init__(self):
        self.score1 = 0
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1209, 942)
        MainWindow.setStyleSheet("background-color: rgb(27, 32, 81);\n"
"")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.bg = QtWidgets.QLabel(self.centralwidget)
        self.bg.setGeometry(QtCore.QRect(0, 0, 1221, 901))
        self.bg.setText("")
        self.bg.setPixmap(QtGui.QPixmap(":/images/images for cascade/bg_image.png"))
        self.bg.setScaledContents(True)
        self.bg.setObjectName("bg")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(0, 0, 1201, 751))
        self.widget.setStyleSheet("background: transparent;")
        self.widget.setObjectName("widget")
        self.main_title_quiz = QtWidgets.QLabel(self.widget)
        self.main_title_quiz.setGeometry(QtCore.QRect(450, 0, 381, 71))
        self.main_title_quiz.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.main_title_quiz.setStyleSheet("background: transparent;\n"
"font: 24pt \"Montserrat\";\n"
"font-weight: bold;\n"
"color: rgb(167, 145, 203);\n"
"qproperty-alignment: AlignCenter;\n"
"")
        self.main_title_quiz.setObjectName("main_title_quiz")
        self.bg_box1 = QtWidgets.QLabel(self.widget)
        self.bg_box1.setGeometry(QtCore.QRect(50, 100, 501, 141))
        self.bg_box1.setStyleSheet("border-radius: 15px;\n"
"background-color: rgb(126, 59, 115,0.5);")
        self.bg_box1.setText("")
        self.bg_box1.setObjectName("bg_box1")
        self.select_course_title = QtWidgets.QLabel(self.widget)
        self.select_course_title.setGeometry(QtCore.QRect(-40, 100, 311, 51))
        self.select_course_title.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.select_course_title.setStyleSheet("background: transparent;\n"
"font: 17pt \"Montserrat\";\n"
"color: rgb(167, 145, 203);\n"
"qproperty-alignment: AlignCenter;\n"
"")
        self.select_course_title.setObjectName("select_course_title")
        self.dropdown_course = QtWidgets.QComboBox(MainWindow)
        self.dropdown_course.setGeometry(QtCore.QRect(90, 180, 150, 35))
        course_list=self.display_courses()
        self.dropdown_course.addItems(course_list)

        self.dropdown_course.setStyleSheet("""
QComboBox {
    font: 10pt "Montserrat";
    background-color: rgb(58, 40, 93);
    color: rgb(255, 255, 255);
    font-weight: 500;
}

QComboBox:on {
    background-color: rgb(58, 40, 93); 
}

QComboBox QListView {
    background-color: rgb(58, 40, 93); 
    color: rgb(255, 255, 255); 
    border: 1px solid rgb(100, 100, 100); 
}

QComboBox QListView::item {
    background-color: transparent; 
    color: rgb(255, 255, 255); 
}

QComboBox QListView::item:hover {
    background-color: rgba(255, 255, 255, 0.1); 
}

QComboBox QListView::item:selected {
    background-color: rgb(100, 100, 150); 
    color: rgb(255, 255, 255); 
}
""")

        self.nav_line_2 = QtWidgets.QLabel(self.widget)
        self.nav_line_2.setGeometry(QtCore.QRect(60, 146, 471, 1))
        self.nav_line_2.setStyleSheet("background-color: rgb(255, 255, 255,0.5);")
        self.nav_line_2.setText("")
        self.nav_line_2.setObjectName("nav_line_2")
        self.select_difficulty = QtWidgets.QLabel(self.widget)
        self.select_difficulty.setGeometry(QtCore.QRect(-30, 270, 311, 51))
        self.select_difficulty.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.select_difficulty.setStyleSheet("background: transparent;\n"
"font: 17pt \"Montserrat\";\n"
"color: rgb(167, 145, 203);\n"
"qproperty-alignment: AlignCenter;\n"
"")
        self.select_difficulty.setObjectName("select_difficulty")

        self.dropdown_diff = QtWidgets.QComboBox(MainWindow)
        self.dropdown_diff.setGeometry(QtCore.QRect(90, 350, 150, 35))
        self.dropdown_diff.addItems(['Easy','Medium','Hard'])

        self.dropdown_diff.setStyleSheet("""
QComboBox {
    font: 10pt "Montserrat";
    background-color: rgb(58, 40, 93);
    color: rgb(255, 255, 255);
    font-weight: 500;
}

QComboBox:on {
    background-color: rgb(58, 40, 93); 
}

QComboBox QListView {
    background-color: rgb(58, 40, 93); 
    color: rgb(255, 255, 255); 
    border: 1px solid rgb(100, 100, 100); 
}

QComboBox QListView::item {
    background-color: transparent; 
    color: rgb(255, 255, 255); 
}

QComboBox QListView::item:hover {
    background-color: rgba(255, 255, 255, 0.1); 
}

QComboBox QListView::item:selected {
    background-color: rgb(100, 100, 150); 
    color: rgb(255, 255, 255); 
}
""")
        self.nav_line_3 = QtWidgets.QLabel(self.widget)
        self.nav_line_3.setGeometry(QtCore.QRect(60, 316, 471, 1))
        self.nav_line_3.setStyleSheet("background-color: rgb(255, 255, 255,0.5);")
        self.nav_line_3.setText("")
        self.nav_line_3.setObjectName("nav_line_3")
        self.bg_box2 = QtWidgets.QLabel(self.widget)
        self.bg_box2.setGeometry(QtCore.QRect(50, 270, 501, 141))
        self.bg_box2.setStyleSheet("border-radius: 15px;\n"
"background-color: rgb(112, 72, 163,0.5);")
        self.bg_box2.setText("")
        self.bg_box2.setObjectName("bg_box2")
        self.bg_box3 = QtWidgets.QLabel(self.widget)
        self.bg_box3.setGeometry(QtCore.QRect(650, 100, 501, 141))
        self.bg_box3.setStyleSheet("border-radius: 15px;\n"
"background-color: rgb(72, 147, 163,0.3);")
        self.bg_box3.setText("")
        self.bg_box3.setObjectName("bg_box3")
        self.select_ques_limit = QtWidgets.QLabel(self.widget)
        self.select_ques_limit.setGeometry(QtCore.QRect(610, 100, 311, 51))
        self.select_ques_limit.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.select_ques_limit.setStyleSheet("background: transparent;\n"
"font: 17pt \"Montserrat\";\n"
"color: rgb(167, 145, 203);\n"
"qproperty-alignment: AlignCenter;\n"
"")
        self.select_ques_limit.setObjectName("select_ques_limit")
        self.dropdown_ques = QtWidgets.QComboBox(MainWindow)
        self.dropdown_ques.setGeometry(QtCore.QRect(680, 180, 150, 35))
        self.dropdown_ques.addItems(['5','10','15'])

        self.dropdown_ques.setStyleSheet("""
QComboBox {
    font: 10pt "Montserrat";
    background-color: rgb(58, 40, 93);
    color: rgb(255, 255, 255);
    font-weight: 500;
}

QComboBox:on {
    background-color: rgb(58, 40, 93); 
}

QComboBox QListView {
    background-color: rgb(58, 40, 93); 
    color: rgb(255, 255, 255); 
    border: 1px solid rgb(100, 100, 100); 
}

QComboBox QListView::item {
    background-color: transparent; 
    color: rgb(255, 255, 255); 
}

QComboBox QListView::item:hover {
    background-color: rgba(255, 255, 255, 0.1); 
}

QComboBox QListView::item:selected {
    background-color: rgb(100, 100, 150); 
    color: rgb(255, 255, 255); 
}
""")
        self.nav_line_4 = QtWidgets.QLabel(self.widget)
        self.nav_line_4.setGeometry(QtCore.QRect(660, 147, 477, 1))
        self.nav_line_4.setStyleSheet("background-color: rgb(255, 255, 255,0.5);")
        self.nav_line_4.setText("")
        self.nav_line_4.setObjectName("nav_line_4")
        self.layout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.layout.setGeometry(QtCore.QRect(860, 360, 93, 28))
        self.enter_button = QtWidgets.QPushButton(self.widget)
        self.enter_button.setGeometry(QtCore.QRect(790, 320, 221, 31))
        self.enter_button.setStyleSheet("font: 13pt \"Montserrat\";\n"
"background-color: rgb(87, 60, 138);\n"
"color: rgb(195, 195, 195);\n"
"border:none;")
        self.enter_button.setObjectName("enter_button")
        self.left_button = QtWidgets.QPushButton(self.widget)
        self.left_button.setGeometry(QtCore.QRect(760, 320, 41, 31))
        font = QtGui.QFont()
        font.setFamily("Montserrat")
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setKerning(True)
        self.left_button.setFont(font)
        self.left_button.setStyleSheet("font: 8pt \"Montserrat\";\n"
"background-color: rgb(87, 60, 138);\n"
"color: rgb(195, 195, 195);\n"
"birder:none;\n"
"border-radius: 7px;")
        self.left_button.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/images/images for cascade/starsss.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.left_button.setIcon(icon)
        self.left_button.setIconSize(QtCore.QSize(30, 30))
        self.left_button.setObjectName("left_button")

        self.pushButton_2 = QtWidgets.QPushButton(self.widget)
        self.pushButton_2.setGeometry(QtCore.QRect(1000, 320, 41, 31))
        font = QtGui.QFont()
        font.setFamily("Montserrat")
        font.setPointSize(8)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        font.setKerning(True)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("font: 8pt \"Montserrat\";\n"
"background-color: rgb(87, 60, 138);\n"
"color: rgb(195, 195, 195);\n"
"border-radius:7px;")
        self.pushButton_2.setText("")
        self.pushButton_2.setIcon(icon)
        self.pushButton_2.setIconSize(QtCore.QSize(30, 30))
        self.pushButton_2.setObjectName("pushButton_2")
        self.scrollArea = QtWidgets.QScrollArea(self.widget)
        self.scrollArea.setGeometry(QtCore.QRect(60, 480, 1091, 271))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1089, 269))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
 

        # Create a widget to contain the scroll area
        self.scrollAreaWidget = QtWidgets.QWidget(self.centralwidget)
        self.scrollAreaWidget.setGeometry(QtCore.QRect(60, 480, 1091, 271))
        
        # Set up the layout for the scroll area widget contents
        self.scrollAreaWidget.setLayout(QtWidgets.QVBoxLayout())
        
        # Add the scroll area to the layout of the scroll area widget
        self.scrollAreaWidget.layout().addWidget(self.scrollArea)
        self.question_frame = QtWidgets.QWidget(self.scrollAreaWidgetContents)
        self.question_frame.setGeometry(QtCore.QRect(10, 20, 1061, 171))
        self.question_frame.setObjectName("question_frame")
        self.question = QtWidgets.QTextEdit(self.question_frame)
        self.question.setGeometry(QtCore.QRect(10, 10, 1041, 61))
        self.question.setStyleSheet("font: 15pt \"Montserrat\";")
        self.question.setObjectName("question")
        self.option1 = QtWidgets.QRadioButton(self.question_frame)
        self.option1.setGeometry(QtCore.QRect(30, 90, 241, 31))
        self.option1.setStyleSheet("font: 15pt \"Montserrat\";")
        self.option1.setText("")
        self.option1.setObjectName("option1")
        self.option2 = QtWidgets.QRadioButton(self.question_frame)
        self.option2.setGeometry(QtCore.QRect(30, 130, 241, 31))
        self.option2.setStyleSheet("font: 15pt \"Montserrat\";")
        self.option2.setText("")
        self.option2.setObjectName("option2")
        self.option3 = QtWidgets.QRadioButton(self.question_frame)
        self.option3.setGeometry(QtCore.QRect(340, 90, 241, 31))
        self.option3.setStyleSheet("font: 15pt \"Montserrat\";")
        self.option3.setText("")
        self.option3.setObjectName("option3")
        self.option4 = QtWidgets.QRadioButton(self.question_frame)
        self.option4.setGeometry(QtCore.QRect(340, 130, 241, 31))
        self.option4.setStyleSheet("font: 15pt \"Montserrat\";")
        self.option4.setText("")
        self.option4.setObjectName("option4")
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.scrollAreaWidgetContents.setLayout(QtWidgets.QVBoxLayout())
        self.main_title_quiz.raise_()
        self.label_behind_button = QtWidgets.QLabel(self.widget)
        self.label_behind_button.setGeometry(QtCore.QRect(770, 330, 281, 31))
        self.label_behind_button.setStyleSheet("background-color: rgb(58, 40, 93);\n"
"border-radius:7px;")
        self.label_behind_button.setText("")
        self.label_behind_button.setObjectName("label_behind_button")
        self.label_behind_button.raise_()
        self.bg_box1.raise_()
        self.select_course_title.raise_()
        self.nav_line_2.raise_()
        self.bg_box2.raise_()
        self.select_difficulty.raise_()
        self.nav_line_3.raise_()
        self.bg_box3.raise_()
        self.select_ques_limit.raise_()
        self.nav_line_4.raise_()
        self.enter_button.raise_()
        self.enter_button.clicked.connect(self.display_questions_from_content)
        self.left_button.clicked.connect(self.display_questions_from_content)
        self.pushButton_2.clicked.connect(self.display_questions_from_content)
        self.scrollArea.raise_()
        self.pushButton_2.raise_()
        self.left_button.raise_()
        self.submit_quiz_button = QtWidgets.QPushButton(self.centralwidget)
        self.submit_quiz_button.setGeometry(QtCore.QRect(1060, 760, 93, 28))
        self.submit_quiz_button.setStyleSheet("font: 8pt \"Montserrat\";\n"
"background-color: rgb(87, 60, 138);\n"
"color: rgb(195, 195, 195);")
        self.submit_quiz_button.setObjectName("submit_quiz_button")
        self.submit_quiz_button.clicked.connect(self.calculate_score)
        self.submit_quiz_button.clicked.connect(self.insert_quiz)
        self.line_2 = QtWidgets.QLabel(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(380, 820, 341, 51))
        self.line_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.line_2.setStyleSheet("background: transparent;\n"
"font: 12pt \"Montserrat\";\n"
"color: rgb(167, 145, 203);\n"
"qproperty-alignment: AlignCenter;\n"
"")
        self.line_2.setObjectName("line_2")
        self.score = QtWidgets.QTextEdit(self.centralwidget)
        self.score.setGeometry(QtCore.QRect(620, 830, 104, 41))
        self.score.setObjectName("score")
        self.score.setStyleSheet("font: 12pt 'Montserrat'; color: white;")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1209, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        icon = QtGui.QIcon(":/images/images for cascade/dark_quiz_icon.png")
        MainWindow.setWindowIcon(icon)
        MainWindow.setWindowTitle(_translate("MainWindow", "Quiz"))
        self.main_title_quiz.setText(_translate("MainWindow", "Quiz"))
        self.select_course_title.setText(_translate("MainWindow", "Course:"))
        self.select_difficulty.setText(_translate("MainWindow", "Difficulty:"))
        self.select_ques_limit.setText(_translate("MainWindow", "Question Limit:"))
        self.enter_button.setText(_translate("MainWindow", "Generate Quiz!"))
        self.submit_quiz_button.setText(_translate("MainWindow", "Submit"))
        self.line_2.setText(_translate("MainWindow", "You scored: "))

    def display_courses(self):
        # Connect to the SQLite database
        conn = sqlite3.connect('cascade_project.db')
        cursor = conn.cursor()

        # Fetch the course name from the table
        cursor.execute("SELECT name FROM courses")
        course_name = cursor.fetchall()
        course_list = [name[0] for name in course_name]

        cursor.close()
        conn.close()
        return course_list
    
    def save_information(self,question_limit, difficulty, syllabus, subject):
        prompt_input=f'''Create a quiz:- \nCourse Title: {subject} \nNumber of questions: {question_limit} \nDifficulty Level: {difficulty} \nSyllabus:{syllabus}'''
        return prompt_input
        
    def inputs(self):
        # Connect to the SQLite database
        conn = sqlite3.connect('cascade_project.db')
        cursor = conn.cursor()

        subject = self.dropdown_course.currentText()

        # Use a parameterized query with SQLite's placeholder '?'
        cursor.execute("SELECT syllabus FROM courses WHERE name = ?", (subject,))
        syllabus_row = cursor.fetchone()
        syllabus = syllabus_row[0] if syllabus_row else 'N/A'

        question_limit = self.dropdown_ques.currentText()

        difficulty = self.dropdown_diff.currentText()

        ability_score = 6
        
        # Clamp the ability score to the range [1, 15]
        ability_score = max(1, min(ability_score, 15))

        # Ensure to handle the save_information method accordingly
        return self.save_information(question_limit, difficulty, syllabus, subject )   

    def multiturn_generate_content(self):
        def parse_quiz(quiz_text):
                # Check if the answer key is present in the text
                if "**Answer Key**:" not in quiz_text:
                        raise ValueError("The quiz text does not contain an answer key.")
                
                # Split the text into questions part and answer key part
                parts = quiz_text.split("**Answer Key**:")
                if len(parts) < 2:
                        raise ValueError("The quiz text is not correctly formatted. Ensure it contains both questions and answer key.")

                questions_text, answer_key_text = parts

                # Extract individual questions
                question_pattern = re.compile(r"(\d+)\.\s*(.*?)\s*A\)\s*(.*?)\s*B\)\s*(.*?)\s*C\)\s*(.*?)\s*D\)\s*(.*?)\s*(?=\d+\.\s*|\Z)", re.DOTALL)
                questions = question_pattern.findall(questions_text)

                
                # Extract answers
                answer_pattern = re.compile(r"(\d+)\.\s*([A-D])")
                answers = answer_pattern.findall(answer_key_text)

                # Convert answers to a dictionary for easy lookup
                answer_dict = {int(num): ans for num, ans in answers}

                # Build the list of question dictionaries
                quiz_data = []
                for q in questions:
                        question_number, question_text, option_a, option_b, option_c, option_d = q
                        question_number = int(question_number)
                        correct_answer = answer_dict.get(question_number, "N/A")
                        
                        quiz_data.append({
                        "question_number": question_number,
                        "question_text": question_text.strip(),
                        "options": {
                                "A": option_a.strip(),
                                "B": option_b.strip(),
                                "C": option_c.strip(),
                                "D": option_d.strip(),
                        },
                        "correct_answer": correct_answer
                        })

                return quiz_data

                        
        self.text1_1 = self.inputs()
        textsi_1 = """Create a quiz using the following instructions:
 
        The user will provide:Course title
        Number of questions: {It will range from 5-15}.Difficulty level: {easy, medium, hard}.Syllabus: {content to be covered}.The quiz should include:A TitleFour options (A, B, C, D) for each question.An answer key provided at the end in the format: \"**Answer Key**:\\n1. B)\\n2. A)\\n3. B)\\n4.\".Ensure the questions cover the provided syllabus and match the specified difficulty level. The answer key must be accurate and in the correct format.
 
        Example input from user:
        Create a quiz:-
        Course title: Digital Image Processing
        Number of questions : 5Difficulty level: MediumSyllabus: Understanding of digital image processing concepts, covering topics such as image formation, transformation, depth estimation, feature extraction, image segmentation, pattern analysis, and motion analysis.
 
 
        Example output:
 
        ## Digital Image Processing Quiz\\n\\n1. What transformation is commonly used for perspective correction in digital images?\\n A) Orthogonal transformation\\n B) Affine transformation\\n C) Fourier transform\\n D) Wavelet transform\\n\\n2. What technique is used for depth estimation in multi-camera views?\\n A) Binocular stereopsis\\n B) Image segmentation\\n C) Region growing\\n D) Optical flow\\n\\n3. Which feature extraction method is used for detecting edges in images?\\n A) Harris corner detection\\n B) Canny edge detection\\n C) SIFT feature extraction\\n D) Hough transform\\n\\n4. What is the purpose of image segmentation?\\n A) To classify pixels into regions\\n B) To enhance image contrast\\n C) To remove noise from images\\n D) To compress image data\\n\\n5. How are patterns analyzed in digital image processing?\\n A) Through clustering and classification\\n B) By applying convolution and filtering\\n C) Using Fourier transform and histogram processing\\n D) Through region growing and edge detection\\n\\n**Answer Key**:\\n1. B)\\n2. A)\\n3. B)\\n4. A)\\n5. A)"""
        vertexai.init(project="673460396526", location="us-central1")
        model = GenerativeModel(
        "projects/673460396526/locations/us-central1/endpoints/411716527067234304", system_instruction=[textsi_1]
        )
        chat = model.start_chat()
        response = chat.send_message([self.text1_1])

        if hasattr(response, 'candidates') and len(response.candidates) > 0:
            # Extract the text content from the first candidate
            content = response.candidates[0].content.parts[0].text
        else:  
            print("No candidates found in the response.")

        return parse_quiz(content)


    def display_questions(self, questions_data):
        # Clear any existing widgets in the scroll area
        for i in reversed(range(self.scrollAreaWidgetContents.layout().count())):
                item = self.scrollAreaWidgetContents.layout().itemAt(i)
                if item is not None:
                        widget = item.widget()
                if widget is not None:
                        widget.deleteLater()
                self.scrollAreaWidgetContents.layout().removeItem(item)

        # Loop through the questions data
        for question_data in questions_data:
                # Create a new question frame
                question_frame = QtWidgets.QWidget()
                question_frame.setGeometry(QtCore.QRect(10, 10, 1041, 171))

                # Create a vertical layout for the question frame
                layout = QtWidgets.QVBoxLayout(question_frame)
                layout.setSpacing(10)  # Adjust spacing as needed

                # Create QTextEdit for the question
                question_text_edit = QtWidgets.QTextEdit(question_frame)
                question_text_edit.setGeometry(QtCore.QRect(10, 10, 1041, 61))
                question_text_edit.setStyleSheet("font: 13pt 'Montserrat'; color: white;")
                question_text_edit.setObjectName("question")
                question_text_edit.setPlainText(question_data['question_text'])

                # Create QRadioButtons for options
                option1 = QtWidgets.QRadioButton(question_frame)
                option1.setStyleSheet("font: 11pt 'Montserrat'; color: white;")
                option1.setObjectName("option1")
                option1.setText(question_data['options']['A'])

                option2 = QtWidgets.QRadioButton(question_frame)
                option2.setStyleSheet("font: 11pt 'Montserrat'; color: white;")
                option2.setObjectName("option2")
                option2.setText(question_data['options']['B'])

                option3 = QtWidgets.QRadioButton(question_frame)
                option3.setStyleSheet("font: 11pt 'Montserrat'; color: white;")
                option3.setObjectName("option3")
                option3.setText(question_data['options']['C'])

                option4 = QtWidgets.QRadioButton(question_frame)
                option4.setStyleSheet("font: 11pt 'Montserrat'; color: white;")
                option4.setObjectName("option4")
                option4.setText(question_data['options']['D'])

                option1.option_id = 'A'
                option2.option_id = 'B'
                option3.option_id = 'C'
                option4.option_id = 'D'

                # Add widgets to the layout
                layout.addWidget(question_text_edit)
                layout.addWidget(option1)
                layout.addWidget(option2)
                layout.addWidget(option3)
                layout.addWidget(option4)

                # Add question frame to the scroll area widget contents layout
                self.scrollAreaWidgetContents.layout().addWidget(question_frame)

                self.questions_frames = []

                question_frame.options = [option1, option2, option3, option4]
                question_frame.correct_answer = question_data['correct_answer']
                self.questions_frames.append(question_frame)

                # Connect radio buttons to the check function
                for option in question_frame.options:
                        option.toggled.connect(functools.partial(self.check_answer, question_frame))


    def display_questions_from_content(self):
        questions_data = self.multiturn_generate_content()
        if questions_data:
                self.display_questions(questions_data)
        else:
                # Handle the case when questions data is not available
                pass

    def check_answer(self, question_frame):
        question_text = question_frame.findChild(QtWidgets.QTextEdit, "question").toPlainText()
        correct_answer_checked = False
        for option in question_frame.options:
                if option.isChecked() and option.option_id == question_frame.correct_answer:
                        correct_answer_checked = True
                        break
        if correct_answer_checked:
                self.score1 += 1  # Increment score if correct answer is checked

        # Update the displayed score

    def calculate_score(self):
        final=str(self.score1)
        self.score.setPlainText(final)

    def insert_quiz(self):
        # Connect to the SQLite database
        conn = sqlite3.connect('cascade_project.db')
        cursor = conn.cursor()

        # Get the input values
        course = self.dropdown_course.currentText()
        difficulty = self.dropdown_diff.currentText()
        question_limit = self.dropdown_ques.currentText()
        quiz = self.inputs()  # This should be the generated quiz text
        marks = self.score.toPlainText()  # Example marks, adjust as necessary
        date_taken = QtCore.QDate.currentDate().toString(QtCore.Qt.ISODate)

        # SQL command to insert values into the quizzes table
        insert_query = '''
        INSERT INTO quizzes (course, difficulty, question_limit, quiz, marks, date_taken)
        VALUES (?, ?, ?, ?, ?, ?)
        '''

        # Execute the query with parameters
        cursor.execute(insert_query, (course, difficulty, question_limit, quiz, marks, date_taken))

        # Commit the transaction and close the connection
        conn.commit()
        cursor.close()
        conn.close()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()

    ui = Ui_quiz()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
